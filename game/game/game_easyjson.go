// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package game

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2018_2_codeloft/game/game/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]models.Player, 0, 1)
					} else {
						out.Players = []models.Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.Player
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Players = append(out.Players, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "diff":
			if in.IsNull() {
				in.Skip()
				out.Diff = nil
			} else {
				in.Delim('[')
				if out.Diff == nil {
					if !in.IsDelim(']') {
						out.Diff = make([]DiffCell, 0, 2)
					} else {
						out.Diff = []DiffCell{}
					}
				} else {
					out.Diff = (out.Diff)[:0]
				}
				for !in.IsDelim(']') {
					var v2 DiffCell
					easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame1(in, &v2)
					out.Diff = append(out.Diff, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Players {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"diff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Diff == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Diff {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame1(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame(l, v)
}
func easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame1(in *jlexer.Lexer, out *DiffCell) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pos":
			easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGameModels(in, &out.Pos)
		case "color":
			out.Val = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame1(out *jwriter.Writer, in DiffCell) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGameModels(out, in.Pos)
	}
	{
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Val))
	}
	out.RawByte('}')
}
func easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGameModels(in *jlexer.Lexer, out *models.Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = int(in.Int())
		case "y":
			out.Y = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGameModels(out *jwriter.Writer, in models.Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.X))
	}
	{
		const prefix string = ",\"y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Y))
	}
	out.RawByte('}')
}
func easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame2(in *jlexer.Lexer, out *OutMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame2(out *jwriter.Writer, in OutMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame2(l, v)
}
func easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame3(in *jlexer.Lexer, out *IncomingMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame3(out *jwriter.Writer, in IncomingMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomingMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomingMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComGoParkMailRu20182CodeloftGameGame3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomingMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomingMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComGoParkMailRu20182CodeloftGameGame3(l, v)
}
